package struct;

import com.sun.jna.*;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import struct.rdp_context_library.*;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@com.sun.jna.Structure.FieldOrder({"instance", "peer", "ServerMode", "argc", "argv", "pubSub", "channelErrorEvent", "channelErrorNum", "errorDescription", "rdp", "gdi", "rail", "cache", "channels", "graphics", "input", "update", "settings", "metrics", "codecs", "autodetect", "abortEvent", "disconnectUltimatum", "dump"})
public class rdp_context extends Structure {
    /**
     * < (offset 0)<br>
     * Pointer to a rdp_freerdp structure.<br>
     * This is a back-link to retrieve the freerdp instance from the context.<br>
     * It is set by the freerdp_context_new() function
     */
    public freerdp instance;
    /**
     * < (offset 1)<br>
     * Pointer to the client peer.<br>
     * This is set by a call to freerdp_peer_context_new() during peer<br>
     * initialization. This field is used only on the server side.
     */
    public freerdp_peer peer;
    /** < (offset 2) true when context is in server mode */
    public boolean ServerMode;
    /** Conversion Error : null */
    /** Conversion Error : null */
    /**
     * < (offset 16)<br>
     * Number of arguments given to the program at launch time.<br>
     * Used to keep this data available and used later on, typically just before<br>
     * connection initialization.<br>

     */
    public int argc;
    /**
     * < (offset 17)<br>
     * List of arguments given to the program at launch time.<br>
     * Used to keep this data available and used later on, typically just before<br>
     * connection initialization.<br>
     */
    public PointerByReference argv;
    /** (offset 18) */
    public wPubSub pubSub;
    /** (offset 19) */
    public HANDLE channelErrorEvent;
    /** (offset 20) */
    public int channelErrorNum;
    /** (offset 21) */
    public Pointer errorDescription;
    /** Conversion Error : null */
    public rdpRdp rdp;
    /**
     * < (offset 33)<br>
     * Pointer to a rdp_gdi structure used to keep the gdi settings.<br>
     * It is allocated by gdi_init() and deallocated by gdi_free().<br>
     * It must be deallocated before deallocating this rdp_context structure.
     */
    public rdpGdi gdi;
    /** 34 */
    public rdpRail rail;
    /** 35 */
    public rdpCache cache;
    /** 36 */
    public rdpChannels channels;
    /** 37 */
    public rdpGraphics graphics;
    /** 38 owned by rdpRdp */
    public rdpInput input;
    /** 39 owned by rdpRdp */
    public rdpUpdate update;
    /** 40 owned by rdpRdp */
    public rdp_context_library.rdpSettings settings;
    /** 41 */
    public rdpMetrics metrics;
    /** 42 */
    public rdpCodecs codecs;
    /** 43 owned by rdpRdp */
    public rdpAutoDetect autodetect;
    /** 44 */
    public HANDLE abortEvent;
    /** 45 */
    public int disconnectUltimatum;
    /** Conversion Error : null */
    /** 64 */
    public rdpStreamDumpContext dump;
    /** Conversion Error : null */
    /** Conversion Error : null */
    public rdp_context() {
        super();
    }

    public static abstract class ByReference extends rdp_context implements Structure.ByReference {

    };
    public static abstract class ByValue extends rdp_context implements Structure.ByValue {

    };
}
