package struct;

import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.*;
import struct.rdp_freerdp_library.*;


/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@com.sun.jna.Structure.FieldOrder({"context", "pClientEntryPoints", "input", "update", "settings", "autodetect", "heartbeat", "ContextSize", "ContextNew", "ContextFree", "PreConnect", "PostConnect", "Authenticate", "VerifyX509Certificate", "LogonErrorInfo", "PostDisconnect", "GatewayAuthenticate", "PresentGatewayMessage", "Redirect", "SendChannelData", "ReceiveChannelData", "VerifyCertificateEx", "VerifyChangedCertificateEx", "SendChannelPacket", "AuthenticateEx"})
public class rdp_freerdp extends Structure {
    /**
     * < (offset 0)<br>
     * Pointer to a rdpContext structure.<br>
     * Client applications can use the ContextSize field to register a<br>
     * context bigger than the rdpContext structure. This allow clients to<br>
     * use additional context information. When using this capab/ility, client<br>
     * application should ALWAYS declare their structure with the rdpContext<br>
     * field first, and any additional content following it. Can be allocated<br>
     * by a call to freerdp_context_new(). Must be deallocated by a call to<br>
     * freerdp_context_free() before deallocating the current instance.
     */
    public rdpContext context;
    public RDP_CLIENT_ENTRY_POINTS pClientEntryPoints;
    /** Conversion Error : null */
    /**
     * (offset 16)<br>
     * Input handle for the connection.<br>
     * Will be initialized by a call to freerdp_context_new()<br>
     * owned by rdpRdp
     */
    public rdpInput input;
    /**
     * (offset 17)<br>
     * Update display parameters. Used to register display events callbacks<br>
     * and settings.		 Will be initialized by a call to freerdp_context_new()		 owned by rdpRdp
     */
    public rdpUpdate update;
    /**
     * < (offset 18)<br>
     * Pointer to a rdpSettings structure. Will be used to maintain the<br>
     * required RDP	 settings.		              Will be<br>
     * initialized by	 a call to freerdp_context_new()<br>
     * owned by rdpRdp
     */
    public rdpSettings settings;
    /**
     * (offset 19)<br>
     * Auto-Detect handle for the connection.<br>
     * Will be initialized by a call to freerdp_context_new()<br>
     * owned by rdpRdp
     */
    public rdpAutoDetect autodetect;
    /** (offset 21) owned by rdpRdp */
    public rdpHeartbeat heartbeat;
    /** Conversion Error : null */
    public NativeSize ContextSize;
    public pContextNew ContextNew;
    public pContextFree ContextFree;
    /** Conversion Error : null */
    /** Conversion Error : null */
    public pPreConnect PreConnect;
    public pPostConnect PostConnect;
    /**
     * < (offset 50)<br>
     * Callback for authentication.<br>
     * It is used to get the username/password when it was not<br>
     * provided at connection time.
     */
    public pAuthenticate Authenticate;
    /** Conversion Error : null */
    public pVerifyX509Certificate VerifyX509Certificate;
    public pLogonErrorInfo LogonErrorInfo;
    public pPostDisconnect PostDisconnect;
    /**
     * < (offset 56)<br>
     * Callback for gateway authentication.<br>
     * It is used to get the username/password when it was not<br>
     * provided at connection time.
     */
    public pAuthenticate GatewayAuthenticate;
    /**
     * < (offset 57)<br>
     * Callback for gateway consent messages.<br>
     * It is used to present consent messages to the user.
     */
    public pPresentGatewayMessage PresentGatewayMessage;
    public pRedirect Redirect;
    /** Conversion Error : null */
    public pSendChannelData SendChannelData;
    public pReceiveChannelData ReceiveChannelData;
    public pVerifyCertificateEx VerifyCertificateEx;
    public pVerifyChangedCertificateEx VerifyChangedCertificateEx;
    public pSendChannelPacket SendChannelPacket;
    /**
     * < (offset 69)<br>
     * Callback for authentication.<br>
     * It is used to get the username/password. The reason<br>
     * argument tells why it was called.
     */
    public pAuthenticateEx AuthenticateEx;
    /** Conversion Error : null */
    public rdp_freerdp() {
        super();
    }

    public static abstract class ByReference extends rdp_freerdp implements Structure.ByReference {

    };
    public static abstract class ByValue extends rdp_freerdp implements Structure.ByValue {

    };
}
