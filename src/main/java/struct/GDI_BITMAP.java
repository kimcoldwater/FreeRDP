package struct;

import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import struct.GDI_BITMAP_Library.INT32;
import struct.GDI_BITMAP_Library.UINT32;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */

@com.sun.jna.Structure.FieldOrder({"objectType", "format", "width", "height", "scanline", "data", "free"})
public class GDI_BITMAP extends Structure {
    public byte objectType;
    public UINT32 format;
    public INT32 width;
    public INT32 height;
    public UINT32 scanline;
    public Pointer data;
    public free_callback free;
    public interface free_callback extends Callback {
        void apply(Pointer voidPtr1);
    };
    public GDI_BITMAP() {
        super();
    }

    public GDI_BITMAP(byte objectType, UINT32 format, INT32 width, INT32 height, UINT32 scanline, Pointer data, free_callback free) {
        super();
        this.objectType = objectType;
        this.format = format;
        this.width = width;
        this.height = height;
        this.scanline = scanline;
        this.data = data;
        this.free = free;
    }
    protected ByReference newByReference() { return new ByReference(); }
    protected ByValue newByValue() { return new ByValue(); }
    protected GDI_BITMAP newInstance() { return new GDI_BITMAP(); }
    public static class ByReference extends GDI_BITMAP implements Structure.ByReference {

    };
    public static class ByValue extends GDI_BITMAP implements Structure.ByValue {

    };
}
